service: sls-REST-TS


plugins:
  - serverless-stage-manager
  - serverless-webpack
  - serverless-offline


provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: us-east-1

  environment:
    EXECUTION_STAGE: ${self:provider.stage}
    AWS_DEPLOYMENT_REGION: ${self:provider.region}
    GOOGLE_AUTH_WEB_CLIENT_ID: ${file(./serverless-config/secrets.json):${self:provider.stage}.GOOGLE_AUTH_WEB_CLIENT_ID}
    GOOGLE_AUTH_WEB_CLIENT_SECRET: ${file(./serverless-config/secrets.json):${self:provider.stage}.GOOGLE_AUTH_WEB_CLIENT_SECRET}
    MONGODB_URI: ${file(./serverless-config/secrets.json):${self:provider.stage}.MONGODB_URI}


custom:
  stages:
    - dev
    - test
    - v1.0

  serverless-offline:
    prefix: users
    port: 3000
    stage: ${self:provider.stage}

  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules: true

functions:
  test:
    handler: src/routes/test.handler
    events:
      - http:
          path: /test
          method: get
          cors: true
          authorizer:
            name: optional-user-authorizer
            identitySource: method.request.header.Authorization
            type: token

  optional-user-authorizer:
    handler: src/authorizer/authorizer.optionalHandler

  required-user-authorizer:
    handler: src/authorizer/authorizer.requiredHandler
